# EchoEar hardware pack v1.05

# --- BUSES / PERIPHERALS ------------------------------------------------------
i2c:
  - id: bus_a
    scl: GPIO1
    sda: GPIO2
    scan: true

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO39
    i2s_bclk_pin: GPIO40
    i2s_mclk_pin: GPIO42

audio_adc:
  - platform: es7210
    i2c_id: bus_a
    id: es7210_adc
    bits_per_sample: 16bit
    sample_rate: 16000

audio_dac:
  - platform: es8311
    i2c_id: bus_a
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 48000

# --- TOUCHSCREEN --------------------------------------------------------------
touchscreen:
  - platform: cst816
    id: my_touchscreen
    interrupt_pin: GPIO10
#    reset_pin: GPIO40
    display: main_display
    i2c_id: bus_a

    on_touch:
      then:
        - lambda: |-
            id(gs_touch_active) = true;
            id(gs_start_x) = touch.x;
            id(gs_start_y) = touch.y;
            id(gs_last_x)  = touch.x;
            id(gs_last_y)  = touch.y;
            id(gs_start_ms) = millis();

    on_update:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            for (auto &t : touches) {
              if (t.state >= 1 && t.state <= 2) {
                id(gs_last_x) = t.x;
                id(gs_last_y) = t.y;
                break;
              }
            }

    on_release:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            id(gs_touch_active) = false;

            const int start_x = id(gs_start_x);
            const int start_y = id(gs_start_y);
            const int end_x   = id(gs_last_x);
            const int end_y   = id(gs_last_y);
            const int dx = end_x - start_x;
            const int dy = end_y - start_y;
            const uint32_t dt = millis() - id(gs_start_ms);

            // Scale thresholds with screen
            const int w = id(main_display).get_width();
            const int h = id(main_display).get_height();
            const int min_dim = (w < h) ? w : h;

            // Swipe thresholds
            const int MIN_DIST = std::max(16, min_dim / 8);
            const uint32_t MAX_TIME = 1500;

            // Tap guard (strict)
            const int TAP_MAX_DIST  = std::max(8,  min_dim / 20);
            const uint32_t TAP_MAX_TIME = 300;

            // Tap fallback (more forgiving)
            const int TAP_FB_DIST  = std::max(14, min_dim / 12);
            const uint32_t TAP_FB_TIME = 700;

            // Normalize for display rotation
            const int ROT = ${rotate_display};
            int ndx = dx, ndy = dy;
            switch (ROT) {
              case 0:   break;
              case 90:  ndx =  dy;  ndy = -dx; break;
              case 180: ndx = -dx;  ndy = -dy; break;
              case 270: ndx = -dy;  ndy =  dx; break;
              default: break;
            }

            const int absx = std::abs(ndx);
            const int absy = std::abs(ndy);

            bool is_left=false, is_right=false, is_up=false, is_down=false;

            // Swipe?
            if (dt <= MAX_TIME && (absx >= MIN_DIST || absy >= MIN_DIST)) {
              if (absx >= absy) {
                if (ndx < 0) is_left = true; else is_right = true;
              } else {
                if (ndy < 0) is_up = true; else is_down = true;
              }
            }

            // Not a swipe â†’ tap (strict, then forgiving fallback)
            if (!(is_left || is_right || is_up || is_down)) {
              if ((absx <= TAP_MAX_DIST && absy <= TAP_MAX_DIST && dt <= TAP_MAX_TIME) ||
                  (absx <= TAP_FB_DIST  && absy <= TAP_FB_DIST  && dt <= TAP_FB_TIME)) {
                id(pulse_touch_input).execute();
              }
              return;
            }

            // Always expose to HA via non-blocking pulses
            if (is_left)  id(pulse_swipe_left).execute();
            if (is_right) id(pulse_swipe_right).execute();
            if (is_up)    id(pulse_swipe_up).execute();
            if (is_down)  id(pulse_swipe_down).execute();

            // Optional local handling
            if (id(swipe_local).state) {
              if (is_left)  id(swipe_left_action).execute();
              if (is_right) id(swipe_right_action).execute();
              if (is_up)    id(swipe_up_action).execute();
              if (is_down)  id(swipe_down_action).execute();
            }

# --- BACKLIGHT ----------------------------------------------------------------
output:
  - platform: ledc
    id: backlight_output
    pin: GPIO44
    inverted: false

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: mdi:television
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

# --- AUDIO DEVICES ------------------------------------------------------------
switch:
  - platform: gpio
    name: Speaker Enable
    icon: "mdi:speaker"
    entity_category: config
    pin: GPIO4
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    name: "Top Green LED"
    pin:
      number: GPIO43
      inverted: true
  - platform: gpio
    name: "Power"
    pin: GPIO9
    restore_mode: RESTORE_DEFAULT_ON
    inverted: true

microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_audio_bus
    i2s_din_pin: GPIO15
    adc_type: external
    channel: left
    pdm: false
    sample_rate: 16000
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO41
    dac_type: external
    sample_rate: 16000
    channel: stereo

media_player:
  - platform: speaker
    name: None
    id: external_media_player
    # HW pack must provide "speaker: box_speaker"
    announcement_pipeline:
      speaker: box_speaker
      format: WAV
      sample_rate: 16000
      num_channels: 1
    buffer_size: 250000
    files:
      - id: timer_finished_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/wake_word_triggered.flac
      - id: ready_sound
        file: ${startup_sound_file}
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      condition:
                        - not:
                            voice_assistant.is_running:
      - if:
          condition:
            lambda: 'return id(playing_internal_sound);'
          then:
            - lambda: 'id(playing_internal_sound) = false;'
          else:
            - script.execute: reset_screensaver
            - display.page.show: now_playing_page
            - component.update: main_display
    on_idle:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

# --- BATTERY (FAKE SOURCE TO KEEP WIDGET HAPPY) -------------------------------
sensor:
  - platform: template
    id: battery_voltage
    name: "Battery Voltage"
    unit_of_measurement: "V"
    accuracy_decimals: 2
    device_class: voltage
    state_class: measurement
    on_value:
      then:
        - sensor.template.publish:
            id: battery_percentage
            state: !lambda 'return x;'

interval:
  - interval: 60s        # safe poll rate for the BQ27220
    then:
      - lambda: |-
          using esphome::i2c::ERROR_OK;
          constexpr uint8_t BQ_ADDR = 0x55;
          constexpr uint8_t REG_VOLTAGE = 0x08;  // Voltage() command

          // write register, then read 2 bytes (little-endian mV)
          uint8_t reg = REG_VOLTAGE;
          uint8_t rx[2] = {0};

          if (id(bus_a)->write(BQ_ADDR, &reg, 1) != ERROR_OK) {
            ESP_LOGW("bq27220", "I2C write failed");
            return;
          }
          delayMicroseconds(200);
          if (id(bus_a)->read(BQ_ADDR, rx, 2) != ERROR_OK) {
            ESP_LOGW("bq27220", "I2C read failed");
            return;
          }

          uint16_t mv = (uint16_t(rx[1]) << 8) | rx[0];  // little-endian
          id(battery_voltage).publish_state(mv / 1000.0f);

esp32_touch:
  setup_mode: false
  measurement_duration: 0.25ms
  sleep_duration: 0.5ms

binary_sensor:
  - platform: esp32_touch
    id: top_touch_pad
    name: "Top Touch Pad"
    pin: GPIO7
    threshold: 2000
    filters:
      - delayed_on: 15ms
      - delayed_off: 60ms

# --- DISPLAY DRIVER (MIPI SPI JC3636W518) ------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 18
  data_pins: [46, 13, 11, 12]

display:
  - platform: mipi_spi
    id: main_display
    model: JC3636W518V2
    cs_pin: 14
    reset_pin: 3
    rotation: ${rotate_display}
    update_interval: never
    dimensions:
        height: ${imageheight}
        width: ${imagewidth}
    pages: !include ../display_pages.yaml
