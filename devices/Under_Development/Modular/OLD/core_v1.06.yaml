# Core v1.06

substitutions:
  allowed_characters: >-
    !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？
  loading_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/loading.png
  idle_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/idle.png
  listening_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/listening.png
  thinking_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/thinking.png
  replying_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/replying.png
  error_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/error.png
  timer_finished_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/timer_finished.png
  mute_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/mute.png
  playing_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/playing.png
  clock_background_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Other/${imagewidth}x${imageheight}/${clock_background_image}.png
  startup_sound_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/${startup_sound}.flac

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "000000"
  thinking_illustration_background_color: "000000"
  replying_illustration_background_color: "000000"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: false
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    password: "RZ7D3EzJdPM6"
  on_connect:
    - component.update: clock_background
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

captive_portal:

http_request:

online_image:
  - id: clock_background
    url: ${clock_background_file}
    format: PNG
    type: RGB565
    resize: ${imagewidth}x${imageheight}
    update_interval: never
  - id: temp_fullscreen
    url: ${clock_background_file}
    format: PNG
    type: RGB565
    resize: ${imagewidth}x${imageheight}
    update_interval: never

time:
  - platform: homeassistant
    id: homeassistant_time

api:
  on_client_connected:
    - script.execute: draw_display
    - lambda: |-
        if (!id(boot_sound_played)) {
          id(boot_sound_played) = true;
          if (id(startup_sound_switch).state) {
            id(play_sound)->execute(true, id(ready_sound));
          }
        }
    - script.execute: reset_screensaver
  on_client_disconnected:
    - script.execute: draw_display

  actions:
    - action: show_fullscreen_image
      variables:
        url: string
      then:
        - if:
            condition:
              lambda: |-
                return id(voice_assistant_phase) == ${voice_assist_idle_phase_id}
                    || id(voice_assistant_phase) == ${voice_assist_replying_phase_id};
            then:
              - lambda: id(showing_fullscreen_image) = true;
              - online_image.set_url:
                  id: temp_fullscreen
                  url: !lambda 'return url;'
                  update: true
              - delay: 600ms
              - display.page.show: empty_clock
              - component.update: main_display
              - script.execute: reset_screensaver
              - delay: !lambda |-
                  int s = (int) id(api_image_duration_seconds).state;
                  if (s <= 0) s = 30;
                  return (uint32_t)(s * 1000);
              - online_image.release: temp_fullscreen
              - lambda: id(showing_fullscreen_image) = false;
              - script.execute: draw_display
            else:
              - logger.log:
                  level: INFO
                  format: "show_fullscreen_image ignored (phase=%d)"
                  args: [ 'id(voice_assistant_phase)' ]

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

  - platform: template
    name: "Virtual Touch"
    id: virtual_touch
    on_press:
      - script.execute: handle_screen_tap

number:
  - platform: template
    id: clock_delay_seconds
    name: "Clock Screensaver Delay"
    unit_of_measurement: "s"
    icon: "mdi:timer-outline"
    entity_category: config
    optimistic: true
    restore_value: true
    mode: box
    min_value: 5
    max_value: 600
    step: 5
    initial_value: 10

  - platform: template
    id: api_image_duration_seconds
    name: "API Image Display Time"
    unit_of_measurement: "s"
    icon: "mdi:timer-sand"
    entity_category: config
    optimistic: true
    restore_value: true
    mode: box
    min_value: 1
    max_value: 600
    step: 1
    initial_value: 30

sensor:
  # Hardware pack provides the ADC that publishes into this template
  - platform: template
    id: battery_percentage
    name: "Battery Percentage"
    update_interval: never
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: mdi:battery-medium
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 2.80 -> 0.0
            - 3.10 -> 10.0
            - 3.30 -> 20.0
            - 3.45 -> 30.0
            - 3.60 -> 40.0
            - 3.70 -> 50.0
            - 3.75 -> 60.0
            - 3.80 -> 70.0
            - 3.90 -> 80.0
            - 4.00 -> 90.0
            - 4.20 -> 100.0
      - lambda: |-
          if (x > 100) return 100;
          if (x < 0) return 0;
          return x;
    on_value:
      then:
        - lambda: |-
            int current = (int) x;
            if (current == id(last_battery_percent)) return;
            id(last_battery_percent) = current;
        - if:
            condition:
              switch.is_on: show_battery_status
            then:
              - component.update: main_display

  - platform: homeassistant
    id: ha_weather_temperature
    entity_id: ${weather_entity}
    attribute: temperature
    internal: true
  - platform: homeassistant
    id: ha_weather_cloud_coverage
    entity_id: ${weather_entity}
    attribute: cloud_coverage
    internal: true
  - platform: homeassistant
    id: ha_weather_uv_index
    entity_id: ${weather_entity}
    attribute: uv_index
    internal: true
  - platform: homeassistant
    id: ha_weather_wind_speed
    entity_id: ${weather_entity}
    attribute: wind_speed
    internal: true
  - platform: homeassistant
    id: ha_weather_wind_gust
    entity_id: ${weather_entity}
    attribute: wind_gust_speed
    internal: true
  - platform: homeassistant
    id: ha_weather_humidity
    entity_id: ${weather_entity}
    attribute: humidity
    internal: true
  - platform: homeassistant
    id: ha_weather_pressure
    entity_id: ${weather_entity}
    attribute: pressure
    internal: true

binary_sensor:
  - platform: template
    name: "Touch Button"
    id: touch_input
    on_click:
      min_length: 30ms
      max_length: 600ms
      then:
        - if:
            condition:
              switch.is_on: timer_ringing
            then:
              - switch.turn_off: timer_ringing
            else:
              - if:
                  condition:
                    lambda: return id(wake_word_engine_location).state == "On device";
                  then:
                    - media_player.stop:
                        id: external_media_player
                    - if:
                        condition:
                          not:
                            voice_assistant.is_running:
                        then:
                          - voice_assistant.start:
                        else:
                          - voice_assistant.stop:

  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      ignore_strapping_warning: true
      inverted: true
    id: left_button
    on_multi_click:
      - timing:
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      lambda: return id(wake_word_engine_location).state == "On device";
                    then:
                      - media_player.stop:
                          id: external_media_player
                      - if:
                          condition:
                            not:
                              voice_assistant.is_running:
                          then:
                            - voice_assistant.start:
                          else:
                            - voice_assistant.stop:
      - timing:
          - ON for at least 1s
        then:
          - switch.toggle: show_battery_status
          - script.execute: draw_display

  - platform: template
    name: "Timer Ringing Active"
    id: timer_ringing_active
    device_class: sound
    lambda: |-
      return id(timer_ringing).state;

  - platform: template
    id: swipe_left
    name: "Swipe Left"
    device_class: moving
    entity_category: diagnostic

  - platform: template
    id: swipe_right
    name: "Swipe Right"
    device_class: moving
    entity_category: diagnostic
    
  - platform: template
    id: swipe_up
    name: "Swipe Up"
    device_class: moving
    entity_category: diagnostic
    
  - platform: template
    id: swipe_down
    name: "Swipe Down"
    device_class: moving
    entity_category: diagnostic
    
  - platform: homeassistant
    id: ha_sensor1
    entity_id: ${sensor1_entity}
    internal: true
  - platform: homeassistant
    id: ha_sensor2
    entity_id: ${sensor2_entity}
    internal: true
  - platform: homeassistant
    id: ha_sensor3
    entity_id: ${sensor3_entity}
    internal: true
  - platform: homeassistant
    id: ha_sensor4
    entity_id: ${sensor4_entity}
    internal: true
  - platform: homeassistant
    id: ha_sensor5
    entity_id: ${sensor5_entity}
    internal: true

  - platform: homeassistant
    id: ha_light1
    entity_id: ${light1_entity}
    internal: true
  - platform: homeassistant
    id: ha_light2
    entity_id: ${light2_entity}
    internal: true
  - platform: homeassistant
    id: ha_light3
    entity_id: ${light3_entity}
    internal: true
  - platform: homeassistant
    id: ha_light4
    entity_id: ${light4_entity}
    internal: true
  - platform: homeassistant
    id: ha_light5
    entity_id: ${light5_entity}
    internal: true

output:
  # colors for the clock (logical; not the screen backlight)
  - platform: template
    id: clock_color_r
    type: float
    write_action:
      - lambda: |-
          return;

  - platform: template
    id: clock_color_g
    type: float
    write_action:
      - lambda: |-
          return;

  - platform: template
    id: clock_color_b
    type: float
    write_action:
      - lambda: |-
          return;

light:
  - platform: rgb
    id: clock_color_picker
    name: "Clock Color"
    entity_category: config
    red: clock_color_r
    green: clock_color_g
    blue: clock_color_b

micro_wake_word:
  id: mww
  models:
    - okay_nabu
  on_wake_word_detected:
    - script.execute: reset_screensaver
    - if:
        condition:
          switch.is_on: wake_sound
        then:
          - script.execute:
              id: play_sound
              priority: true
              sound_file: !lambda return id(wake_word_triggered_sound);
          - delay: 300ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: external_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0

  on_listening:
    - script.execute: reset_screensaver
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request_full
        state: "..."
    - text_sensor.template.publish:
        id: text_response_full
        state: "..."
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display

  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display

  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - text_sensor.template.publish:
        id: text_request_full
        state: !lambda return x;
    - script.execute: draw_display

  on_tts_start:
    - script.execute: reset_screensaver
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - text_sensor.template.publish:
        id: text_response_full
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - lambda: 'id(playing_internal_sound) = true;'
    - script.execute: draw_display

  on_end:
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - wait_until:
        condition:
          - and:
              - not:
                  media_player.is_announcing:
#              - not:
#                  speaker.is_playing:
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""

  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display

  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display

  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display

  on_timer_started:
    - script.execute: reset_screensaver
    - script.execute: draw_display

  on_timer_cancelled:
    - script.execute: draw_display

  on_timer_updated:
    - script.execute: draw_display

  on_timer_tick:
    - script.execute: draw_display

  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        condition:
          - media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

interval:
  - interval: 1s
    then:
      - lambda: |-
          const bool idle_phase   = (id(voice_assistant_phase) == ${voice_assist_idle_phase_id});
          const bool not_muted    = !id(mute).state;
          const bool clock_ok     = id(clock_enabled).state;
          const bool not_fullscreen   = !id(showing_fullscreen_image);

          id(check_if_timers_active).execute();
          const bool has_active_timer = id(global_is_timer_active);

          if (idle_phase && not_muted && clock_ok && not_fullscreen && !has_active_timer) {
            id(idle_seconds)++;
            int delay_s = (int) id(clock_delay_seconds).state;
            if (delay_s <= 0) delay_s = 30;
            if (id(idle_seconds) >= delay_s && !id(show_clock)) {
              id(show_clock) = true;
              id(show_clock_page).execute();
            }
          } else {
            if (id(show_clock)) id(show_clock) = false;
            id(idle_seconds) = 0;
          }
      - if:
          condition:
            lambda: return id(show_clock);
          then:
            - component.update: main_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |-
                            if (id(showing_fullscreen_image)
                                && id(voice_assistant_phase) == ${voice_assist_idle_phase_id}) {
                              id(main_display).show_page(empty_clock);
                              id(main_display).update();
                              return;
                            }
                            if (id(voice_assistant_phase) == ${voice_assist_idle_phase_id}
                                && id(show_clock)
                                && id(clock_enabled).state) {
                              id(show_clock_page).execute();
                              return;
                            }
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(main_display).show_page(listening_page);
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(main_display).show_page(thinking_page);
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(main_display).show_page(replying_page);
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(main_display).show_page(error_page);
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(main_display).show_page(muted_page);
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(main_display).show_page(no_ha_page);
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(main_display).show_page(timer_finished_page);
                                break;
                              default:
                                id(main_display).show_page(idle_page);
                                break;
                            }
                            id(main_display).update();
                      else:
                        - display.page.show: no_ha_page
                        - component.update: main_display
                else:
                  - display.page.show: no_wifi_page
                  - component.update: main_display
          else:
            - display.page.show: initializing_page
            - component.update: main_display

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;

  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if (iterable_timer.second.is_active) output = true;
            }
          }
          id(global_is_timer_active) = output;

  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;

  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          id(global_is_timer) = (timers.size() > 0);

  - id: draw_timer_timeline
    then:
      - lambda: |-
          const int W = id(main_display).get_width();
          const int H = id(main_display).get_height();
          const bool SMALL = (W <= 128 && H <= 64);

          // refresh timer state
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (!id(global_is_timer_active) && !id(global_is_timer)) return;

          if (SMALL) {
            // ---------- compact UI for tiny screens (monochrome safe) ----------
            const int pad    = 6;
            const int bar_h  = 6;
            const int bar_w  = W - (pad * 2);
            const int x      = pad;
            const int y      = H - bar_h - pad;

            uint32_t total = 0, left = 0;
            if (id(global_is_timer_active)) {
              id(fetch_first_active_timer).execute();
              total = std::max(id(global_first_active_timer).total_seconds, (uint32_t)1);
              left  = id(global_first_active_timer).seconds_left;
            } else {
              id(fetch_first_timer).execute();
              total = std::max(id(global_first_timer).total_seconds, (uint32_t)1);
              left  = id(global_first_timer).seconds_left;
            }

            // label "m:ss" if >=60s, else "ss"
            char label[16];
            if (left >= 60) {
              unsigned long mm = left / 60;
              unsigned long ss = left % 60;
              snprintf(label, sizeof(label), "%lu:%02lu", mm, ss);
            } else {
              snprintf(label, sizeof(label), "%lus", (unsigned long) left);
            }

            // centered box (clear interior first)
            const int box_w = 78;
            const int box_h = 26;
            const int box_x = (W - box_w) / 2;
            const int box_y = (H - box_h) / 2 - 2;

            id(main_display).filled_rectangle(box_x + 1, box_y + 1, box_w - 2, box_h - 2, Color::BLACK);
            id(main_display).rectangle(box_x, box_y, box_w, box_h, Color::WHITE);
            id(main_display).printf(W/2, box_y + box_h/2, id(font_big_date), Color::WHITE,
                                    TextAlign::CENTER, "%s", label);

            // progress bar (outline, clear interior, then fill progress)
            id(main_display).rectangle(x, y, bar_w, bar_h, Color::WHITE);
            const int in_w = bar_w - 2;
            const int in_h = bar_h - 2;
            id(main_display).filled_rectangle(x + 1, y + 1, in_w, in_h, Color::BLACK);

            int filled_px = (int) lroundf(in_w * (float) left / (float) total);
            if (filled_px > 0) {
              id(main_display).filled_rectangle(x + 1, y + 1, filled_px, in_h, Color::WHITE);
            }
            return;  // small-screen path done
          }

          // ---------- original timeline for larger panels (unchanged) ----------
          const int padding = 20;
          const int bar_h   = 15;
          const int bar_w   = W - (padding * 2);
          const int x       = (W - bar_w) / 2;
          const int y       = H - (bar_h + 15);
          const int fill_h  = bar_h - 2;

          if (id(global_is_timer_active)) {
            id(fetch_first_active_timer).execute();
            int filled = round(
              bar_w * id(global_first_active_timer).seconds_left
              / std::max(id(global_first_active_timer).total_seconds, (uint32_t)1)
            );
            id(main_display).filled_rectangle(x, y, bar_w, bar_h, Color::WHITE);
            if (filled > 0) {
              id(main_display).filled_rectangle(x, y + 1, filled, fill_h, id(active_timer_color));
            }
          } else if (id(global_is_timer)) {
            id(fetch_first_timer).execute();
            int filled = round(
              bar_w * id(global_first_timer).seconds_left
              / std::max(id(global_first_timer).total_seconds, (uint32_t)1)
            );
            id(main_display).filled_rectangle(x, y, bar_w, bar_h, Color::WHITE);
            if (filled > 0) {
              id(main_display).filled_rectangle(x, y + 1, filled, fill_h, id(paused_timer_color));
            }
          }

  - id: draw_active_timer_widget
    then:
      - lambda: |-
          // Skip the circular widget on tiny screens; keep for larger panels
          const int W = id(main_display).get_width();
          const int H = id(main_display).get_height();
          if (W <= 128 && H <= 64) return;

          id(check_if_timers_active).execute();
          if (!id(global_is_timer_active)) return;

          // --- original circular widget (unchanged) ---
          const int cx = W / 2;
          const int cy = H / 2;

          const int S = std::min(W, H);
          const int R_SEC = (int)(S * 0.30f);
          const int L_SEC = std::max(5, S / 28);
          const int TH_SEC = 2;

          const int GAP   = std::max(6, S / 60);
          const int R_MIN = R_SEC - L_SEC - GAP;
          const int L_MIN = std::max(4, L_SEC - 3);
          const int TH_MIN = 2;

          const Color GREY(60, 60, 60);
          const Color SEC_COL = id(paused_timer_color); // blue
          const Color MIN_COL(255, 64, 64);             // red

          id(fetch_first_active_timer).execute();
          uint32_t left  = id(global_first_active_timer).seconds_left;
          int hours_left   = left / 3600;
          int minutes_left = (left / 60) % 60;
          int seconds_left = left % 60;

          int sec_active = seconds_left;
          if ((minutes_left + hours_left) > 0 && seconds_left == 0) sec_active = 60;

          int min_active = minutes_left;
          if (hours_left > 0 && minutes_left == 0) min_active = 60;

          auto draw_tick = [&](float angle, int r_end, int len, Color col, int thick) {
            const float ca = cosf(angle), sa = sinf(angle);
            const int x1 = cx + (int)((r_end - len) * ca);
            const int y1 = cy + (int)((r_end - len) * sa);
            const int x2 = cx + (int)(r_end * ca);
            const int y2 = cy + (int)(r_end * sa);

            if (thick <= 1) {
              id(main_display).line(x1, y1, x2, y2, col);
              return;
            }
            const float px = -sa, py = ca;
            for (int t = -thick/2; t <= thick/2; ++t) {
              int ox = (int) lroundf(px * t);
              int oy = (int) lroundf(py * t);
              id(main_display).line(x1 + ox, y1 + oy, x2 + ox, y2 + oy, col);
            }
          };

          const float TWO_PI = 6.2831853f;
          for (int i = 0; i < 60; ++i) {
            float a = -3.1415926f/2 + (i / 60.0f) * TWO_PI;
            draw_tick(a, R_SEC, L_SEC, (i < sec_active) ? SEC_COL : GREY, TH_SEC);
          }

          if (left >= 60) {
            for (int i = 0; i < 60; ++i) {
              float a = -3.1415926f/2 + (i / 60.0f) * TWO_PI;
              draw_tick(a, R_MIN, L_MIN, (i < min_active) ? MIN_COL : GREY, TH_MIN);
            }
          }

          char s_buf[8];
          snprintf(s_buf, sizeof(s_buf), "%02d", seconds_left);
          id(main_display).printf(cx, cy + 2, id(font_big_clock_mono), Color::WHITE,
                                  TextAlign::CENTER, "%s", s_buf);

          if (left >= 60) {
            int total_minutes = left / 60;
            char m_buf[12];
            snprintf(m_buf, sizeof(m_buf), "%d", total_minutes);
            const int TEXT_PAD = std::max(16, S / 14);
            int y_min = cy - (L_SEC + TEXT_PAD);
            id(main_display).printf(cx, y_min, id(font_big_clock_mono), Color::WHITE,
                                    TextAlign::CENTER, "%s", m_buf);
          }

  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:

  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:

  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          id(playing_internal_sound) = true;
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ((id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING) || priority) {
            id(external_media_player)->play_file(sound_file, true, false);
          }

  - id: reset_screensaver
    then:
      - lambda: |-
          id(show_clock) = false;
          id(idle_seconds) = 0;

  - id: handle_screen_tap
    then:
      - script.execute: reset_screensaver
      - if:
          condition:
            switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing
          else:
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "On device";
                then:
                  - if:
                      condition:
                        not:
                          voice_assistant.is_running:
                      then:
                        - voice_assistant.start:
                      else:
                        - voice_assistant.stop:
      - display.page.show: idle_page
      - component.update: main_display

  - id: show_clock_page
    then:
      - lambda: |-
          const std::string sel = id(clock_style).state;
          if (sel == "Default") {
            id(main_display).show_page(default_clock);
          } else if (sel == "Flip") {
            id(main_display).show_page(flip_clock);
          } else if (sel == "Presence") {
            id(main_display).show_page(presence_sensor_clock);
          } else if (sel == "Weather") {
            id(main_display).show_page(weather_clock);
          } else if (sel == "Small") {
            id(main_display).show_page(small_clock);
          } else if (sel == "Analog") {
            id(main_display).show_page(analog_clock);
          } else {
            id(main_display).show_page(clock_7segment);
          }
          id(main_display).update();

  - id: swipe_left_action   # next clock style
    then:
      - lambda: |-
          static const char* const opts[] = {
            "7-segment","Flip","Default","Presence","Weather","Small","Analog"
          };
          const int N = sizeof(opts)/sizeof(opts[0]);
          std::string cur = id(clock_style).state.c_str();
          int idx = 0;
          for (int i = 0; i < N; i++) if (cur == opts[i]) { idx = i; break; }
          int next = (idx + 1) % N;
          id(clock_style).publish_state(opts[next]);
      - script.execute: show_clock_page

  - id: swipe_right_action  # previous clock style
    then:
      - lambda: |-
          static const char* const opts[] = {
            "7-segment","Flip","Default","Presence","Weather","Small","Analog"
          };
          const int N = sizeof(opts)/sizeof(opts[0]);
          std::string cur = id(clock_style).state.c_str();
          int idx = 0;
          for (int i = 0; i < N; i++) if (cur == opts[i]) { idx = i; break; }
          int prev = (idx - 1 + N) % N;
          id(clock_style).publish_state(opts[prev]);
      - script.execute: show_clock_page

  - id: swipe_up_action     # next wallpaper (cycle)
    then:
      - lambda: |-
          static const char* const opts[] = { "clock","hacker","ha-girl","mission","Rolex","starrysky" };
          const int N = sizeof(opts)/sizeof(opts[0]);
          std::string cur = id(clock_wallpaper_image).state.c_str();
          int idx = 0;
          for (int i = 0; i < N; i++) if (cur == opts[i]) { idx = i; break; }
          int next = (idx + 1) % N;
          id(clock_wallpaper_image).publish_state(opts[next]);
      - script.execute: draw_display

  - id: swipe_down_action   # toggle battery widget
    then:
      - switch.toggle: show_battery_status
      - script.execute: draw_display

  - id: pulse_swipe_left
    mode: restart
    then:
      - binary_sensor.template.publish: { id: swipe_left,  state: ON }
      - delay: 150ms
      - binary_sensor.template.publish: { id: swipe_left,  state: OFF }

  - id: pulse_swipe_right
    mode: restart
    then:
      - binary_sensor.template.publish: { id: swipe_right, state: ON }
      - delay: 150ms
      - binary_sensor.template.publish: { id: swipe_right, state: OFF }

  - id: pulse_swipe_up
    mode: restart
    then:
      - binary_sensor.template.publish: { id: swipe_up,    state: ON }
      - delay: 150ms
      - binary_sensor.template.publish: { id: swipe_up,    state: OFF }

  - id: pulse_swipe_down
    mode: restart
    then:
      - binary_sensor.template.publish: { id: swipe_down,  state: ON }
      - delay: 150ms
      - binary_sensor.template.publish: { id: swipe_down,  state: OFF }

  - id: pulse_touch_input
    then:
      - binary_sensor.template.publish: { id: touch_input, state: ON }
      - delay: 150ms
      - binary_sensor.template.publish: { id: touch_input, state: OFF }

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: reset_screensaver
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: reset_screensaver
      - script.execute: draw_display

  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - lambda: |-
          id(external_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
            .set_announcement(true)
            .perform();
          id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - media_player.stop:
          announcement: true
    on_turn_on:
      - lambda: |-
          id(external_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
            .set_announcement(true)
            .perform();
          id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: startup_sound_switch
    name: Startup sound
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: show_text
    name: Show Text
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: show_battery_status
    name: Show Battery Status
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: draw_display
    on_turn_off:
      - script.execute: draw_display

  - platform: template
    id: clock_enabled
    name: "Clock Screensaver"
    icon: "mdi:clock-outline"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      - lambda: |-
          if (id(show_clock)) id(show_clock) = false;
          id(idle_seconds) = 0;
      - display.page.show: idle_page
      - component.update: main_display

  - platform: template
    id: clock_24h
    name: "Clock 24h Format"
    icon: "mdi:clock-time-four-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_time
    name: "Clock Show Time"
    icon: "mdi:clock-digital"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_seconds
    name: "Clock Show Seconds"
    icon: "mdi:timer-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_date
    name: "Clock Show Date"
    icon: "mdi:calendar"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_dots
    name: "Clock Show Dots"
    icon: "mdi:dots-circle"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: clock_show_wallpaper
    name: "Clock Show Wallpaper"
    icon: "mdi:image"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: swipe_local
    name: "Handle swipes on device"
    icon: "mdi:gesture-swipe"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id}
                           || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

  - platform: template
    entity_category: config
    name: "Clock Style"
    id: clock_style
    icon: "mdi:clock-digital"
    optimistic: true
    restore_value: true
    options:
      - 7-segment
      - Flip
      - Default
      - Presence
      - Weather
      - Small
      - Analog
    initial_option: Default
    on_value:
      - if:
          condition:
            lambda: return id(show_clock);
          then:
            - script.execute: show_clock_page

  - platform: template
    entity_category: config
    name: "Clock Wallpaper (Online)"
    id: clock_wallpaper_image
    icon: "mdi:image"
    optimistic: true
    restore_value: true
    options:
      - clock
      - hacker
      - ha-girl
      - mission
      - Rolex
      - starrysky
    initial_option: ${clock_background_image}
    on_value:
      - online_image.set_url:
          id: clock_background
          url: !lambda |-
            std::string base = "https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Other/"
                               "${imagewidth}x${imageheight}/";
            return base + std::string(x) + ".png";
          update: true
      - script.execute: draw_display

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"

  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}

  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false

  - id: global_is_timer_active
    type: bool
    restore_value: false

  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false

  - id: global_is_timer
    type: bool
    restore_value: false

  - id: last_battery_percent
    type: int
    restore_value: no
    initial_value: "-1"

  - id: playing_internal_sound
    type: bool
    restore_value: no
    initial_value: "false"

  - id: boot_sound_played
    type: bool
    restore_value: no
    initial_value: "false"

  - id: idle_seconds
    type: int
    restore_value: no
    initial_value: "0"

  - id: show_clock
    type: bool
    restore_value: no
    initial_value: "false"

  - id: showing_fullscreen_image
    type: bool
    restore_value: no
    initial_value: "false"

  - id: gs_touch_active
    type: bool
    restore_value: no
    initial_value: "false"
  - id: gs_start_x
    type: int
    restore_value: no
    initial_value: "0"
  - id: gs_start_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: gs_last_x
    type: int
    restore_value: no
    initial_value: "0"
  - id: gs_last_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: gs_start_ms
    type: uint32_t
    restore_value: no
    initial_value: "0"

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${mute_illustration_file}
    id: casita_muted
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: ${playing_illustration_file}
    id: casita_playing
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: https://raw.githubusercontent.com/RealDeco/xiaozhi-esphome/main/images/Other/error-no-wifi.png
    id: error_no_wifi
    resize: ${imagewidth}x${imageheight}
    type: RGB565
  - file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Other/error-no-ha.png
    id: error_no_ha
    resize: ${imagewidth}x${imageheight}
    type: RGB565

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_request_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_battery
    size: 14
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: Syne Mono
      weight: 400
    id: font_big_clock_mono
    size: 42
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 400
    id: font_big_date
    size: 22
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: Syne Mono
      weight: 400
    id: font_small_clock_mono
    size: 24
    glyphsets:
      - ${font_glyphsets}

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>30) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>30) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - id: text_request_full
    platform: template
    name: "Text Request"
    on_value:
      lambda: |-
        if (id(text_request_full).state.length() > 250) {
          std::string s = id(text_request_full).state.c_str();
          std::string truncated = esphome::str_truncate(s.c_str(), 250);
          id(text_request_full).state = truncated.c_str();
        }

  - id: text_response_full
    platform: template
    name: "Text Response"
    on_value:
      lambda: |-
        if (id(text_response_full).state.length() > 250) {
          std::string s = id(text_response_full).state.c_str();
          std::string truncated = esphome::str_truncate(s.c_str(), 250);
          id(text_response_full).state = truncated.c_str();
        }

  - platform: homeassistant
    id: ha_weather_temperature_unit
    entity_id: ${weather_entity}
    attribute: temperature_unit
    internal: true

  - platform: homeassistant
    id: ha_weather_wind_speed_unit
    entity_id: ${weather_entity}
    attribute: wind_speed_unit
    internal: true

  - platform: homeassistant
    id: ha_weather_pressure_unit
    entity_id: ${weather_entity}
    attribute: pressure_unit
    internal: true

color:
  - id: idle_color
    hex: ${loading_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"
  - id: seconds_dot_color
    hex: "3b89e3"
