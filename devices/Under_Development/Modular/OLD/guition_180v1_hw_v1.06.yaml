# Taichi Pi v1 hardware v1.06

# --- BUSES / PERIPHERALS ------------------------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 9
  data_pins: [11, 12, 13, 14]

i2c:
  id: touchscreen_bus
  sda: 7
  scl: 8

i2s_audio:
  # Microphone bus
  - id: i2s_mic
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin:  GPIO42

  # Speaker bus
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin:  GPIO18
    i2s_mclk_pin:  GPIO21

# --- TOUCHSCREEN --------------------------------------------------------------
touchscreen:
  - platform: cst816
    id: my_touchscreen
    interrupt_pin: GPIO41
    reset_pin: GPIO40
    display: main_display
    i2c_id: touchscreen_bus

    on_touch:
      then:
        - lambda: |-
            id(gs_touch_active) = true;
            id(gs_start_x) = touch.x;
            id(gs_start_y) = touch.y;
            id(gs_last_x)  = touch.x;
            id(gs_last_y)  = touch.y;
            id(gs_start_ms) = millis();

    on_update:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            for (auto &t : touches) {
              if (t.state >= 1 && t.state <= 2) {
                id(gs_last_x) = t.x;
                id(gs_last_y) = t.y;
                break;
              }
            }

    on_release:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            id(gs_touch_active) = false;

            const int start_x = id(gs_start_x);
            const int start_y = id(gs_start_y);
            const int end_x   = id(gs_last_x);
            const int end_y   = id(gs_last_y);
            const int dx = end_x - start_x;
            const int dy = end_y - start_y;
            const uint32_t dt = millis() - id(gs_start_ms);

            // Scale thresholds with screen
            const int w = id(main_display).get_width();
            const int h = id(main_display).get_height();
            const int min_dim = (w < h) ? w : h;

            // Swipe thresholds
            const int MIN_DIST = std::max(16, min_dim / 8);
            const uint32_t MAX_TIME = 1500;

            // Tap guard (strict)
            const int TAP_MAX_DIST  = std::max(8,  min_dim / 20);
            const uint32_t TAP_MAX_TIME = 300;

            // Tap fallback (more forgiving)
            const int TAP_FB_DIST  = std::max(14, min_dim / 12);
            const uint32_t TAP_FB_TIME = 700;

            // Normalize for display rotation
            const int ROT = ${rotate_display};
            int ndx = dx, ndy = dy;
            switch (ROT) {
              case 0:   break;
              case 90:  ndx =  dy;  ndy = -dx; break;
              case 180: ndx = -dx;  ndy = -dy; break;
              case 270: ndx = -dy;  ndy =  dx; break;
              default: break;
            }

            const int absx = std::abs(ndx);
            const int absy = std::abs(ndy);

            bool is_left=false, is_right=false, is_up=false, is_down=false;

            // Swipe?
            if (dt <= MAX_TIME && (absx >= MIN_DIST || absy >= MIN_DIST)) {
              if (absx >= absy) {
                if (ndx < 0) is_left = true; else is_right = true;
              } else {
                if (ndy < 0) is_up = true; else is_down = true;
              }
            }

            // Not a swipe â†’ tap (strict, then forgiving fallback)
            if (!(is_left || is_right || is_up || is_down)) {
              if ((absx <= TAP_MAX_DIST && absy <= TAP_MAX_DIST && dt <= TAP_MAX_TIME) ||
                  (absx <= TAP_FB_DIST  && absy <= TAP_FB_DIST  && dt <= TAP_FB_TIME)) {
                id(pulse_touch_input).execute();
              }
              return;
            }

            // Always expose to HA via non-blocking pulses
            if (is_left)  id(pulse_swipe_left).execute();
            if (is_right) id(pulse_swipe_right).execute();
            if (is_up)    id(pulse_swipe_up).execute();
            if (is_down)  id(pulse_swipe_down).execute();

            // Optional local handling
            if (id(swipe_local).state) {
              if (is_left)  id(swipe_left_action).execute();
              if (is_right) id(swipe_right_action).execute();
              if (is_up)    id(swipe_up_action).execute();
              if (is_down)  id(swipe_down_action).execute();
            }

# --- BACKLIGHT ----------------------------------------------------------------
output:
  - platform: ledc
    id: backlight_output
    pin: GPIO15
    inverted: false

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: mdi:television
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

# --- AUDIO DEVICES ------------------------------------------------------------

switch:
  - platform: gpio
    name: Speaker Enable
    icon: "mdi:speaker"
    entity_category: config
    pin: GPIO48
    restore_mode: RESTORE_DEFAULT_ON

microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_mic
    i2s_din_pin: GPIO46
    adc_type: external
    channel: left
    pdm: false
    sample_rate: 16000
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO17
    dac_type: external
    sample_rate: 16000
    channel: stereo

media_player:
  - platform: speaker
    name: None
    id: external_media_player
    # HW pack must provide "speaker: box_speaker"
    announcement_pipeline:
      speaker: box_speaker
      format: WAV
      sample_rate: 16000
      num_channels: 1
    buffer_size: 250000
    files:
      - id: timer_finished_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/sounds/wake_word_triggered.flac
      - id: ready_sound
        file: ${startup_sound_file}
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      condition:
                        - not:
                            voice_assistant.is_running:
      - if:
          condition:
            lambda: 'return id(playing_internal_sound);'
          then:
            - lambda: 'id(playing_internal_sound) = false;'
          else:
            - script.execute: reset_screensaver
            - display.page.show: now_playing_page
            - component.update: main_display
    on_idle:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

# --- BATTERY (FAKE SOURCE TO KEEP WIDGET HAPPY) -------------------------------
sensor:
  - platform: adc
    id: battery_voltage
    pin: GPIO1
    attenuation: 12db
    update_interval: 24h
    internal: true
    filters:
      - lambda: 'return 4.20;'
    on_value:
      then:
        - sensor.template.publish:
            id: battery_percentage
            state: !lambda 'return x;'

# --- DISPLAY DRIVER (MIPI SPI JC3636W518) ------------------------------------
display:
  - platform: mipi_spi
    id: main_display
    model: JC3636W518
    rotation: ${rotate_display}
    update_interval: never
    dimensions:
        height: ${imageheight}
        width: ${imagewidth}
    pages: !include ../display_pages.yaml
